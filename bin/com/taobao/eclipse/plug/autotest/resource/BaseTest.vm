package ${packageStr};

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Date;


/**
* <p>
*  测试基础类
* </p>
* @author junyu.wy
*/
public class BaseTest {



	/**
	 * 创建对象
	 * @param clazz
	 * @return
	 */
	public static Object createObj(Class<?> clazz){
		Object obj = null;
		try {
			obj = Class.forName(clazz.getName()).newInstance();
			Method methods[] = clazz.getMethods();
			for(Method m : methods){
				if(Modifier.isPublic(m.getModifiers())
						&& m.getParameterTypes().length==1
						&& m.getName().startsWith("set")){
					Object p = createSimpleParameter(m.getParameterTypes()[0]);
					if(p!=null)
						m.invoke(obj, p);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return obj;
	}

	/**
	 * 创建简单对象
	 * @param className
	 * @return
	 */
	public static Object createSimpleParameter(Class<?> p){
		Object obj = null;
		if( p == int.class || p==Integer.class){
			obj=Integer.valueOf(1);
		}else if( p == short.class || p==Short.class){
			obj=Short.valueOf((short)1);
		}else if( p == byte.class || p==Byte.class){
			obj=Byte.valueOf((byte)1);
		}else if( p == long.class || p==Long.class){
			obj=Long.valueOf(1);
		}else if( p == double.class || p==Double.class){
			obj=Double.valueOf(1);
		}else if( p == float.class || p==Float.class){
			obj=Float.valueOf(1);
		}else if( p == String.class){
			obj="test";
		}else if( p == boolean.class || p==Boolean.class){
			obj=Boolean.FALSE;
		}else if( p == java.util.Date.class){
			obj=new Date();
		}

		return obj;
	}
}

